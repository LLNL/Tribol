! wrapftribol_test_mesh.F
! This file is generated by Shroud 0.12.1. Do not edit.
!
! Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
! other Tribol Project Developers. See the top-level LICENSE file for details.
!
! SPDX-License-Identifier: (MIT).
!
!>
!! \file wrapftribol_test_mesh.F
!! \brief Shroud generated wrapper for tribol namespace
!<
! splicer begin file_top
! splicer end file_top
module tribol_test_mesh
    use iso_c_binding, only : C_INT, C_LONG, C_NULL_PTR, C_PTR, C_SIZE_T
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    ! splicer end module_top

    ! helper capsule_data_helper
    type, bind(C) :: SHROUD_capsule_data
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type SHROUD_capsule_data

    ! helper array_context
    type, bind(C) :: TRIBOL_TEST_MESH_SHROUD_array
        ! address of C++ memory
        type(SHROUD_capsule_data) :: cxx
        ! address of data in cxx
        type(C_PTR) :: base_addr = C_NULL_PTR
        ! type of element
        integer(C_INT) :: type
        ! bytes-per-item or character len of data in cxx
        integer(C_SIZE_T) :: elem_len = 0_C_SIZE_T
        ! size of data in cxx
        integer(C_SIZE_T) :: size = 0_C_SIZE_T
        ! number of dimensions
        integer(C_INT) :: rank = -1
        integer(C_LONG) :: shape(7) = 0
    end type TRIBOL_TEST_MESH_SHROUD_array

    type, bind(C) :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type TRIBOL_TEST_MESH_SHROUD_testmesh_capsule

    type testmesh
        type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule) :: cxxmem
        ! splicer begin class.TestMesh.component_part
        ! splicer end class.TestMesh.component_part
    contains
        procedure :: delete => tribol_test_mesh_delete
        procedure :: setup_contact_mesh_hex => tribol_test_mesh_setup_contact_mesh_hex
        procedure :: get_x => tribol_test_mesh_get_x
        procedure :: get_y => tribol_test_mesh_get_y
        procedure :: get_z => tribol_test_mesh_get_z
        procedure :: get_mortar_face_connectivity_size => tribol_test_mesh_get_mortar_face_connectivity_size
        procedure :: get_mortar_face_connectivity => tribol_test_mesh_get_mortar_face_connectivity
        procedure :: get_nonmortar_face_connectivity_size => tribol_test_mesh_get_nonmortar_face_connectivity_size
        procedure :: get_nonmortar_face_connectivity => tribol_test_mesh_get_nonmortar_face_connectivity
        procedure :: get_numtotalnodes => tribol_test_mesh_get_numtotalnodes
        procedure :: get_nummortarfaces => tribol_test_mesh_get_nummortarfaces
        procedure :: get_numnonmortarfaces => tribol_test_mesh_get_numnonmortarfaces
        procedure :: get_instance => tribol_test_mesh_get_instance
        procedure :: set_instance => tribol_test_mesh_set_instance
        procedure :: associated => tribol_test_mesh_associated
        ! splicer begin class.TestMesh.type_bound_procedure_part
        ! splicer end class.TestMesh.type_bound_procedure_part
    end type testmesh

    interface operator (.eq.)
        module procedure testmesh_eq
    end interface

    interface operator (.ne.)
        module procedure testmesh_ne
    end interface

    interface

        function c_testmesh_new(SHT_crv) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_new")
            use iso_c_binding, only : C_PTR
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_testmesh_new

        subroutine c_testmesh_delete(self) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_delete")
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
        end subroutine c_testmesh_delete

        subroutine c_testmesh_setup_contact_mesh_hex(self, numElemsX1, &
                numElemsY1, numElemsZ1, xMin1, yMin1, zMin1, xMax1, &
                yMax1, zMax1, numElemsX2, numElemsY2, numElemsZ2, xMin2, &
                yMin2, zMin2, xMax2, yMax2, zMax2, thetaMortar, &
                thetaNonmortar) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_setup_contact_mesh_hex")
            use iso_c_binding, only : C_DOUBLE, C_INT
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            integer(C_INT), value, intent(IN) :: numElemsX1
            integer(C_INT), value, intent(IN) :: numElemsY1
            integer(C_INT), value, intent(IN) :: numElemsZ1
            real(C_DOUBLE), value, intent(IN) :: xMin1
            real(C_DOUBLE), value, intent(IN) :: yMin1
            real(C_DOUBLE), value, intent(IN) :: zMin1
            real(C_DOUBLE), value, intent(IN) :: xMax1
            real(C_DOUBLE), value, intent(IN) :: yMax1
            real(C_DOUBLE), value, intent(IN) :: zMax1
            integer(C_INT), value, intent(IN) :: numElemsX2
            integer(C_INT), value, intent(IN) :: numElemsY2
            integer(C_INT), value, intent(IN) :: numElemsZ2
            real(C_DOUBLE), value, intent(IN) :: xMin2
            real(C_DOUBLE), value, intent(IN) :: yMin2
            real(C_DOUBLE), value, intent(IN) :: zMin2
            real(C_DOUBLE), value, intent(IN) :: xMax2
            real(C_DOUBLE), value, intent(IN) :: yMax2
            real(C_DOUBLE), value, intent(IN) :: zMax2
            real(C_DOUBLE), value, intent(IN) :: thetaMortar
            real(C_DOUBLE), value, intent(IN) :: thetaNonmortar
        end subroutine c_testmesh_setup_contact_mesh_hex

        pure function c_testmesh_get_x(self) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_x")
            use iso_c_binding, only : C_PTR
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_testmesh_get_x

        function c_testmesh_get_x_bufferify(self, DSHC_rv) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_x_bufferify")
            use iso_c_binding, only : C_PTR
            import :: TRIBOL_TEST_MESH_SHROUD_array, TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            type(TRIBOL_TEST_MESH_SHROUD_array), intent(INOUT) :: DSHC_rv
            type(C_PTR) SHT_rv
        end function c_testmesh_get_x_bufferify

        pure function c_testmesh_get_y(self) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_y")
            use iso_c_binding, only : C_PTR
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_testmesh_get_y

        function c_testmesh_get_y_bufferify(self, DSHC_rv) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_y_bufferify")
            use iso_c_binding, only : C_PTR
            import :: TRIBOL_TEST_MESH_SHROUD_array, TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            type(TRIBOL_TEST_MESH_SHROUD_array), intent(INOUT) :: DSHC_rv
            type(C_PTR) SHT_rv
        end function c_testmesh_get_y_bufferify

        pure function c_testmesh_get_z(self) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_z")
            use iso_c_binding, only : C_PTR
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_testmesh_get_z

        function c_testmesh_get_z_bufferify(self, DSHC_rv) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_z_bufferify")
            use iso_c_binding, only : C_PTR
            import :: TRIBOL_TEST_MESH_SHROUD_array, TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            type(TRIBOL_TEST_MESH_SHROUD_array), intent(INOUT) :: DSHC_rv
            type(C_PTR) SHT_rv
        end function c_testmesh_get_z_bufferify

        pure function c_testmesh_get_mortar_face_connectivity_size(self) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_mortar_face_connectivity_size")
            use iso_c_binding, only : C_INT
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_testmesh_get_mortar_face_connectivity_size

        pure function c_testmesh_get_mortar_face_connectivity(self) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_mortar_face_connectivity")
            use iso_c_binding, only : C_PTR
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_testmesh_get_mortar_face_connectivity

        function c_testmesh_get_mortar_face_connectivity_bufferify(self, &
                DSHC_rv) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_mortar_face_connectivity_bufferify")
            use iso_c_binding, only : C_PTR
            import :: TRIBOL_TEST_MESH_SHROUD_array, TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            type(TRIBOL_TEST_MESH_SHROUD_array), intent(INOUT) :: DSHC_rv
            type(C_PTR) SHT_rv
        end function c_testmesh_get_mortar_face_connectivity_bufferify

        pure function c_testmesh_get_nonmortar_face_connectivity_size(self) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_nonmortar_face_connectivity_size")
            use iso_c_binding, only : C_INT
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_testmesh_get_nonmortar_face_connectivity_size

        pure function c_testmesh_get_nonmortar_face_connectivity(self) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_nonmortar_face_connectivity")
            use iso_c_binding, only : C_PTR
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_testmesh_get_nonmortar_face_connectivity

        function c_testmesh_get_nonmortar_face_connectivity_bufferify(self, &
                DSHC_rv) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_nonmortar_face_connectivity_bufferify")
            use iso_c_binding, only : C_PTR
            import :: TRIBOL_TEST_MESH_SHROUD_array, TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            type(TRIBOL_TEST_MESH_SHROUD_array), intent(INOUT) :: DSHC_rv
            type(C_PTR) SHT_rv
        end function c_testmesh_get_nonmortar_face_connectivity_bufferify

        function c_testmesh_get_numtotalnodes(self) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_numtotalnodes")
            use iso_c_binding, only : C_INT
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_testmesh_get_numtotalnodes

        function c_testmesh_get_nummortarfaces(self) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_nummortarfaces")
            use iso_c_binding, only : C_INT
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_testmesh_get_nummortarfaces

        function c_testmesh_get_numnonmortarfaces(self) &
                result(SHT_rv) &
                bind(C, name="TRIBOL_TEST_MESH_TestMesh_get_numnonmortarfaces")
            use iso_c_binding, only : C_INT
            import :: TRIBOL_TEST_MESH_SHROUD_testmesh_capsule
            implicit none
            type(TRIBOL_TEST_MESH_SHROUD_testmesh_capsule), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_testmesh_get_numnonmortarfaces

        ! splicer begin class.TestMesh.additional_interfaces
        ! splicer end class.TestMesh.additional_interfaces

        ! splicer begin additional_interfaces
        ! splicer end additional_interfaces
    end interface

    interface testmesh
        module procedure tribol_test_mesh_new
    end interface testmesh

contains

    function tribol_test_mesh_new() &
            result(SHT_rv)
        use iso_c_binding, only : C_PTR
        type(testmesh) :: SHT_rv
        ! splicer begin class.TestMesh.method.new
        type(C_PTR) :: SHT_prv
        SHT_prv = c_testmesh_new(SHT_rv%cxxmem)
        ! splicer end class.TestMesh.method.new
    end function tribol_test_mesh_new

    subroutine tribol_test_mesh_delete(obj)
        class(testmesh) :: obj
        ! splicer begin class.TestMesh.method.delete
        call c_testmesh_delete(obj%cxxmem)
        ! splicer end class.TestMesh.method.delete
    end subroutine tribol_test_mesh_delete

    subroutine tribol_test_mesh_setup_contact_mesh_hex(obj, numElemsX1, &
            numElemsY1, numElemsZ1, xMin1, yMin1, zMin1, xMax1, yMax1, &
            zMax1, numElemsX2, numElemsY2, numElemsZ2, xMin2, yMin2, &
            zMin2, xMax2, yMax2, zMax2, thetaMortar, thetaNonmortar)
        use iso_c_binding, only : C_DOUBLE, C_INT
        class(testmesh) :: obj
        integer(C_INT), value, intent(IN) :: numElemsX1
        integer(C_INT), value, intent(IN) :: numElemsY1
        integer(C_INT), value, intent(IN) :: numElemsZ1
        real(C_DOUBLE), value, intent(IN) :: xMin1
        real(C_DOUBLE), value, intent(IN) :: yMin1
        real(C_DOUBLE), value, intent(IN) :: zMin1
        real(C_DOUBLE), value, intent(IN) :: xMax1
        real(C_DOUBLE), value, intent(IN) :: yMax1
        real(C_DOUBLE), value, intent(IN) :: zMax1
        integer(C_INT), value, intent(IN) :: numElemsX2
        integer(C_INT), value, intent(IN) :: numElemsY2
        integer(C_INT), value, intent(IN) :: numElemsZ2
        real(C_DOUBLE), value, intent(IN) :: xMin2
        real(C_DOUBLE), value, intent(IN) :: yMin2
        real(C_DOUBLE), value, intent(IN) :: zMin2
        real(C_DOUBLE), value, intent(IN) :: xMax2
        real(C_DOUBLE), value, intent(IN) :: yMax2
        real(C_DOUBLE), value, intent(IN) :: zMax2
        real(C_DOUBLE), value, intent(IN) :: thetaMortar
        real(C_DOUBLE), value, intent(IN) :: thetaNonmortar
        ! splicer begin class.TestMesh.method.setup_contact_mesh_hex
        call c_testmesh_setup_contact_mesh_hex(obj%cxxmem, numElemsX1, &
            numElemsY1, numElemsZ1, xMin1, yMin1, zMin1, xMax1, yMax1, &
            zMax1, numElemsX2, numElemsY2, numElemsZ2, xMin2, yMin2, &
            zMin2, xMax2, yMax2, zMax2, thetaMortar, thetaNonmortar)
        ! splicer end class.TestMesh.method.setup_contact_mesh_hex
    end subroutine tribol_test_mesh_setup_contact_mesh_hex

    function tribol_test_mesh_get_x(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_DOUBLE, C_PTR, c_f_pointer
        class(testmesh) :: obj
        type(TRIBOL_TEST_MESH_SHROUD_array) :: DSHC_rv
        real(C_DOUBLE), pointer :: SHT_rv(:)
        ! splicer begin class.TestMesh.method.get_x
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_testmesh_get_x_bufferify(obj%cxxmem, DSHC_rv)
        call c_f_pointer(SHT_ptr, SHT_rv, DSHC_rv%shape(1:1))
        ! splicer end class.TestMesh.method.get_x
    end function tribol_test_mesh_get_x

    function tribol_test_mesh_get_y(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_DOUBLE, C_PTR, c_f_pointer
        class(testmesh) :: obj
        type(TRIBOL_TEST_MESH_SHROUD_array) :: DSHC_rv
        real(C_DOUBLE), pointer :: SHT_rv(:)
        ! splicer begin class.TestMesh.method.get_y
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_testmesh_get_y_bufferify(obj%cxxmem, DSHC_rv)
        call c_f_pointer(SHT_ptr, SHT_rv, DSHC_rv%shape(1:1))
        ! splicer end class.TestMesh.method.get_y
    end function tribol_test_mesh_get_y

    function tribol_test_mesh_get_z(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_DOUBLE, C_PTR, c_f_pointer
        class(testmesh) :: obj
        type(TRIBOL_TEST_MESH_SHROUD_array) :: DSHC_rv
        real(C_DOUBLE), pointer :: SHT_rv(:)
        ! splicer begin class.TestMesh.method.get_z
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_testmesh_get_z_bufferify(obj%cxxmem, DSHC_rv)
        call c_f_pointer(SHT_ptr, SHT_rv, DSHC_rv%shape(1:1))
        ! splicer end class.TestMesh.method.get_z
    end function tribol_test_mesh_get_z

    function tribol_test_mesh_get_mortar_face_connectivity_size(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(testmesh) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.TestMesh.method.get_mortar_face_connectivity_size
        SHT_rv = c_testmesh_get_mortar_face_connectivity_size(obj%cxxmem)
        ! splicer end class.TestMesh.method.get_mortar_face_connectivity_size
    end function tribol_test_mesh_get_mortar_face_connectivity_size

    function tribol_test_mesh_get_mortar_face_connectivity(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_PTR, c_f_pointer
        class(testmesh) :: obj
        type(TRIBOL_TEST_MESH_SHROUD_array) :: DSHC_rv
        integer(C_INT), pointer :: SHT_rv(:)
        ! splicer begin class.TestMesh.method.get_mortar_face_connectivity
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_testmesh_get_mortar_face_connectivity_bufferify(obj%cxxmem, &
            DSHC_rv)
        call c_f_pointer(SHT_ptr, SHT_rv, DSHC_rv%shape(1:1))
        ! splicer end class.TestMesh.method.get_mortar_face_connectivity
    end function tribol_test_mesh_get_mortar_face_connectivity

    function tribol_test_mesh_get_nonmortar_face_connectivity_size(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(testmesh) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.TestMesh.method.get_nonmortar_face_connectivity_size
        SHT_rv = c_testmesh_get_nonmortar_face_connectivity_size(obj%cxxmem)
        ! splicer end class.TestMesh.method.get_nonmortar_face_connectivity_size
    end function tribol_test_mesh_get_nonmortar_face_connectivity_size

    function tribol_test_mesh_get_nonmortar_face_connectivity(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_PTR, c_f_pointer
        class(testmesh) :: obj
        type(TRIBOL_TEST_MESH_SHROUD_array) :: DSHC_rv
        integer(C_INT), pointer :: SHT_rv(:)
        ! splicer begin class.TestMesh.method.get_nonmortar_face_connectivity
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_testmesh_get_nonmortar_face_connectivity_bufferify(obj%cxxmem, &
            DSHC_rv)
        call c_f_pointer(SHT_ptr, SHT_rv, DSHC_rv%shape(1:1))
        ! splicer end class.TestMesh.method.get_nonmortar_face_connectivity
    end function tribol_test_mesh_get_nonmortar_face_connectivity

    function tribol_test_mesh_get_numtotalnodes(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(testmesh) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.TestMesh.method.get_numtotalnodes
        SHT_rv = c_testmesh_get_numtotalnodes(obj%cxxmem)
        ! splicer end class.TestMesh.method.get_numtotalnodes
    end function tribol_test_mesh_get_numtotalnodes

    function tribol_test_mesh_get_nummortarfaces(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(testmesh) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.TestMesh.method.get_nummortarfaces
        SHT_rv = c_testmesh_get_nummortarfaces(obj%cxxmem)
        ! splicer end class.TestMesh.method.get_nummortarfaces
    end function tribol_test_mesh_get_nummortarfaces

    function tribol_test_mesh_get_numnonmortarfaces(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(testmesh) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.TestMesh.method.get_numnonmortarfaces
        SHT_rv = c_testmesh_get_numnonmortarfaces(obj%cxxmem)
        ! splicer end class.TestMesh.method.get_numnonmortarfaces
    end function tribol_test_mesh_get_numnonmortarfaces

    ! Return pointer to C++ memory.
    function tribol_test_mesh_get_instance(obj) result (cxxptr)
        use iso_c_binding, only: C_PTR
        class(testmesh), intent(IN) :: obj
        type(C_PTR) :: cxxptr
        cxxptr = obj%cxxmem%addr
    end function tribol_test_mesh_get_instance

    subroutine tribol_test_mesh_set_instance(obj, cxxmem)
        use iso_c_binding, only: C_PTR
        class(testmesh), intent(INOUT) :: obj
        type(C_PTR), intent(IN) :: cxxmem
        obj%cxxmem%addr = cxxmem
        obj%cxxmem%idtor = 0
    end subroutine tribol_test_mesh_set_instance

    function tribol_test_mesh_associated(obj) result (rv)
        use iso_c_binding, only: c_associated
        class(testmesh), intent(IN) :: obj
        logical rv
        rv = c_associated(obj%cxxmem%addr)
    end function tribol_test_mesh_associated

    ! splicer begin class.TestMesh.additional_functions
    ! splicer end class.TestMesh.additional_functions

    ! splicer begin additional_functions
    ! splicer end additional_functions

    function testmesh_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(testmesh), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function testmesh_eq

    function testmesh_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(testmesh), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function testmesh_ne

end module tribol_test_mesh
