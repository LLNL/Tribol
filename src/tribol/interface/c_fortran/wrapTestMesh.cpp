// wrapTestMesh.cpp
// This file is generated by Shroud 0.12.1. Do not edit.

// Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
// other Tribol Project Developers. See the top-level LICENSE file for details.
//
// SPDX-License-Identifier: (MIT)

#include "wrapTestMesh.h"
#include <cstddef>
#include "tribol/utils/TestUtils.hpp"

// splicer begin class.TestMesh.CXX_definitions
// splicer end class.TestMesh.CXX_definitions

extern "C" {

// splicer begin class.TestMesh.C_definitions
// splicer end class.TestMesh.C_definitions

TRIBOL_TEST_MESH_TestMesh * TRIBOL_TEST_MESH_TestMesh_new(TRIBOL_TEST_MESH_TestMesh * SHC_rv)
{
    // splicer begin class.TestMesh.method.new
    tribol::TestMesh *SHCXX_rv = new tribol::TestMesh();
    SHC_rv->addr = static_cast<void *>(SHCXX_rv);
    SHC_rv->idtor = 1;
    return SHC_rv;
    // splicer end class.TestMesh.method.new
}

void TRIBOL_TEST_MESH_TestMesh_delete(TRIBOL_TEST_MESH_TestMesh * self)
{
    tribol::TestMesh *SH_this = static_cast<tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.delete
    delete SH_this;
    self->addr = nullptr;
    // splicer end class.TestMesh.method.delete
}

void TRIBOL_TEST_MESH_TestMesh_setup_contact_mesh_hex(TRIBOL_TEST_MESH_TestMesh * self, int numElemsX1, int numElemsY1, int numElemsZ1, double xMin1, double yMin1, double zMin1, double xMax1, double yMax1, double zMax1, int numElemsX2, int numElemsY2, int numElemsZ2, double xMin2, double yMin2, double zMin2, double xMax2, double yMax2, double zMax2, double thetaMaster, double thetaSlave)
{
    tribol::TestMesh *SH_this = static_cast<tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.setup_contact_mesh_hex
    SH_this->setupContactMeshHex(numElemsX1, numElemsY1, numElemsZ1, xMin1, yMin1, zMin1, xMax1, yMax1, zMax1, numElemsX2, numElemsY2, numElemsZ2, xMin2, yMin2, zMin2, xMax2, yMax2, zMax2, thetaMaster, thetaSlave);
    // splicer end class.TestMesh.method.setup_contact_mesh_hex
}

double * TRIBOL_TEST_MESH_TestMesh_get_x(const TRIBOL_TEST_MESH_TestMesh * self)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_x
    double * SHC_rv = SH_this->getX();
    return SHC_rv;
    // splicer end class.TestMesh.method.get_x
}

double * TRIBOL_TEST_MESH_TestMesh_get_x_bufferify(const TRIBOL_TEST_MESH_TestMesh * self, TRIBOL_TEST_MESH_SHROUD_array *DSHC_rv)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_x_bufferify
    double * SHC_rv = SH_this->getX();
    DSHC_rv->cxx.addr  = SHC_rv;
    DSHC_rv->cxx.idtor = 0;
    DSHC_rv->addr.base = SHC_rv;
    DSHC_rv->type = SH_TYPE_DOUBLE;
    DSHC_rv->elem_len = sizeof(double);
    DSHC_rv->rank = 1;
    DSHC_rv->shape[0] = SH_this->numTotalNodes;
    DSHC_rv->size = DSHC_rv->shape[0];
    return SHC_rv;
    // splicer end class.TestMesh.method.get_x_bufferify
}

double * TRIBOL_TEST_MESH_TestMesh_get_y(const TRIBOL_TEST_MESH_TestMesh * self)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_y
    double * SHC_rv = SH_this->getY();
    return SHC_rv;
    // splicer end class.TestMesh.method.get_y
}

double * TRIBOL_TEST_MESH_TestMesh_get_y_bufferify(const TRIBOL_TEST_MESH_TestMesh * self, TRIBOL_TEST_MESH_SHROUD_array *DSHC_rv)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_y_bufferify
    double * SHC_rv = SH_this->getY();
    DSHC_rv->cxx.addr  = SHC_rv;
    DSHC_rv->cxx.idtor = 0;
    DSHC_rv->addr.base = SHC_rv;
    DSHC_rv->type = SH_TYPE_DOUBLE;
    DSHC_rv->elem_len = sizeof(double);
    DSHC_rv->rank = 1;
    DSHC_rv->shape[0] = SH_this->numTotalNodes;
    DSHC_rv->size = DSHC_rv->shape[0];
    return SHC_rv;
    // splicer end class.TestMesh.method.get_y_bufferify
}

double * TRIBOL_TEST_MESH_TestMesh_get_z(const TRIBOL_TEST_MESH_TestMesh * self)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_z
    double * SHC_rv = SH_this->getZ();
    return SHC_rv;
    // splicer end class.TestMesh.method.get_z
}

double * TRIBOL_TEST_MESH_TestMesh_get_z_bufferify(const TRIBOL_TEST_MESH_TestMesh * self, TRIBOL_TEST_MESH_SHROUD_array *DSHC_rv)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_z_bufferify
    double * SHC_rv = SH_this->getZ();
    DSHC_rv->cxx.addr  = SHC_rv;
    DSHC_rv->cxx.idtor = 0;
    DSHC_rv->addr.base = SHC_rv;
    DSHC_rv->type = SH_TYPE_DOUBLE;
    DSHC_rv->elem_len = sizeof(double);
    DSHC_rv->rank = 1;
    DSHC_rv->shape[0] = SH_this->numTotalNodes;
    DSHC_rv->size = DSHC_rv->shape[0];
    return SHC_rv;
    // splicer end class.TestMesh.method.get_z_bufferify
}

int TRIBOL_TEST_MESH_TestMesh_get_master_face_connectivity_size(const TRIBOL_TEST_MESH_TestMesh * self)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_master_face_connectivity_size
    int SHC_rv = SH_this->getMasterFaceConnectivitySize();
    return SHC_rv;
    // splicer end class.TestMesh.method.get_master_face_connectivity_size
}

int * TRIBOL_TEST_MESH_TestMesh_get_master_face_connectivity(const TRIBOL_TEST_MESH_TestMesh * self)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_master_face_connectivity
    int * SHC_rv = SH_this->getMasterFaceConnectivity();
    return SHC_rv;
    // splicer end class.TestMesh.method.get_master_face_connectivity
}

int * TRIBOL_TEST_MESH_TestMesh_get_master_face_connectivity_bufferify(const TRIBOL_TEST_MESH_TestMesh * self, TRIBOL_TEST_MESH_SHROUD_array *DSHC_rv)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_master_face_connectivity_bufferify
    int * SHC_rv = SH_this->getMasterFaceConnectivity();
    DSHC_rv->cxx.addr  = SHC_rv;
    DSHC_rv->cxx.idtor = 0;
    DSHC_rv->addr.base = SHC_rv;
    DSHC_rv->type = SH_TYPE_INT;
    DSHC_rv->elem_len = sizeof(int);
    DSHC_rv->rank = 1;
    DSHC_rv->shape[0] = SH_this->getMasterFaceConnectivitySize();
    DSHC_rv->size = DSHC_rv->shape[0];
    return SHC_rv;
    // splicer end class.TestMesh.method.get_master_face_connectivity_bufferify
}

int TRIBOL_TEST_MESH_TestMesh_get_slave_face_connectivity_size(const TRIBOL_TEST_MESH_TestMesh * self)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_slave_face_connectivity_size
    int SHC_rv = SH_this->getSlaveFaceConnectivitySize();
    return SHC_rv;
    // splicer end class.TestMesh.method.get_slave_face_connectivity_size
}

int * TRIBOL_TEST_MESH_TestMesh_get_slave_face_connectivity(const TRIBOL_TEST_MESH_TestMesh * self)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_slave_face_connectivity
    int * SHC_rv = SH_this->getSlaveFaceConnectivity();
    return SHC_rv;
    // splicer end class.TestMesh.method.get_slave_face_connectivity
}

int * TRIBOL_TEST_MESH_TestMesh_get_slave_face_connectivity_bufferify(const TRIBOL_TEST_MESH_TestMesh * self, TRIBOL_TEST_MESH_SHROUD_array *DSHC_rv)
{
    const tribol::TestMesh *SH_this = static_cast<const tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_slave_face_connectivity_bufferify
    int * SHC_rv = SH_this->getSlaveFaceConnectivity();
    DSHC_rv->cxx.addr  = SHC_rv;
    DSHC_rv->cxx.idtor = 0;
    DSHC_rv->addr.base = SHC_rv;
    DSHC_rv->type = SH_TYPE_INT;
    DSHC_rv->elem_len = sizeof(int);
    DSHC_rv->rank = 1;
    DSHC_rv->shape[0] = SH_this->getSlaveFaceConnectivitySize();
    DSHC_rv->size = DSHC_rv->shape[0];
    return SHC_rv;
    // splicer end class.TestMesh.method.get_slave_face_connectivity_bufferify
}

int TRIBOL_TEST_MESH_TestMesh_get_numtotalnodes(TRIBOL_TEST_MESH_TestMesh * self)
{
    tribol::TestMesh *SH_this = static_cast<tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_numtotalnodes
    return SH_this->numTotalNodes;
    // splicer end class.TestMesh.method.get_numtotalnodes
}

int TRIBOL_TEST_MESH_TestMesh_get_nummasterfaces(TRIBOL_TEST_MESH_TestMesh * self)
{
    tribol::TestMesh *SH_this = static_cast<tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_nummasterfaces
    return SH_this->numMasterFaces;
    // splicer end class.TestMesh.method.get_nummasterfaces
}

int TRIBOL_TEST_MESH_TestMesh_get_numslavefaces(TRIBOL_TEST_MESH_TestMesh * self)
{
    tribol::TestMesh *SH_this = static_cast<tribol::TestMesh *>(self->addr);
    // splicer begin class.TestMesh.method.get_numslavefaces
    return SH_this->numSlaveFaces;
    // splicer end class.TestMesh.method.get_numslavefaces
}

}  // extern "C"
