// Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
// other Tribol Project Developers. See the top-level LICENSE file for details.
//
// SPDX-License-Identifier: (MIT)

#ifndef TRIBOL_TYPES_HPP_
#define TRIBOL_TYPES_HPP_

#include <cstdint>
#include <vector>

#include "axom/config.hpp"
#include "axom/core/Macros.hpp"

#cmakedefine TRIBOL_USE_SINGLE_PRECISION
#cmakedefine TRIBOL_USE_64BIT_INDEXTYPE
#cmakedefine TRIBOL_DATA_DIR "@TRIBOL_DATA_DIR@"
#cmakedefine TRIBOL_USE_MPI
#cmakedefine TRIBOL_USE_UMPIRE
#cmakedefine BUILD_REDECOMP

#ifdef TRIBOL_USE_MPI
#include "mpi.h"
#endif

namespace tribol
{

#ifdef TRIBOL_USE_MPI
using CommType = MPI_Comm;
#define TRIBOL_COMM_WORLD MPI_COMM_WORLD
#define TRIBOL_COMM_NULL MPI_COMM_NULL
#else
using CommType = int;
#define TRIBOL_COMM_WORLD 0
#define TRIBOL_COMM_NULL -1
#endif

using integer = int;

template<typename T>
using array = T*;

#ifdef TRIBOL_USE_64BIT_INDEXTYPE
using IndexType = std::int64_t;
#else
using IndexType = std::int32_t;
#endif

#ifdef TRIBOL_USE_SINGLE_PRECISION
using real = float;
#else
using real= double;
#endif

template< typename T >
using containerArray = std::vector<T>;

#if defined(__clang__)  
  #define RESTRICT __restrict__
  #define RESTRICT_THIS
  #define CONSTEXPRFUNC constexpr  
#elif defined(__GNUC__)  
  #if defined(__INTEL_COMPILER)
    #define RESTRICT __restrict__
    #define RESTRICT_THIS
    #define CONSTEXPRFUNC
  #else
    #define RESTRICT __restrict__
    #define RESTRICT_THIS
    #define CONSTEXPRFUNC constexpr
  #endif
#elif defined(_WIN32)  
  #define RESTRICT __restrict
  #define RESTRICT_THIS
  #define CONSTEXPRFUNC constexpr  
#endif

#if TRIBOL_DEBUG
#define TRIBOL_DEBUG_LOG( msg )                                                \
  do {                                                                         \
    std::ostringstream oss;                                                    \
    oss << msg;                                                                \
    std::cout << oss.str() << std::endl;                                       \
  } while( false )
#else
#define TRIBOL_DEBUG_LOG( msg ) do{}while(false)
#endif

#define TRIBOL_UNUSED_VAR AXOM_UNUSED_VAR
#define TRIBOL_UNUSED_PARAM AXOM_UNUSED_PARAM

} 

#endif // TRIBOL_TYPES_HPP_
