# Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
# other Tribol Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)

variables:
  Clang_14_ImageName: 'seracllnl/tpls:clang-14_04-16-24_07h-15m'
  GCC_13_ImageName: 'seracllnl/tpls:gcc-13_04-16-24_07h-15m'
  HOME_DIR: '/home/serac'
  BASE_CMAKE_OPTS: '-UUMPIRE_DIR'

jobs:
- job: Build_and_Test
  strategy:
    matrix:
      linux_gcc11_debug:
          VM_ImageName: 'ubuntu-22.04'
          Compiler_ImageName: $(GCC_13_ImageName)
          TEST_TARGET: 'linux_gcc13'
          HOST_CONFIG: 'gcc@13.1.0.cmake'
          BUILD_TYPE: 'Debug'
          BUILD_REDECOMP: 'On'
      linux_gcc11_debug_noredecomp:
          VM_ImageName: 'ubuntu-22.04'
          Compiler_ImageName: $(GCC_13_ImageName)
          TEST_TARGET: 'linux_gcc13'
          HOST_CONFIG: 'gcc@13.1.0.cmake'
          BUILD_TYPE: 'Debug'
          BUILD_REDECOMP: 'Off'
      linux_gcc11_release:
          VM_ImageName: 'ubuntu-22.04'
          Compiler_ImageName: $(GCC_13_ImageName)
          TEST_TARGET: 'linux_gcc13'
          HOST_CONFIG: 'gcc@13.1.0.cmake'
          BUILD_TYPE: 'Release'
          BUILD_REDECOMP: 'On'
      linux_clang10_debug:
          VM_ImageName: 'ubuntu-22.04'
          Compiler_ImageName: $(Clang_14_ImageName)
          TEST_TARGET: 'linux_clang14'
          HOST_CONFIG: 'clang@14.0.0.cmake'
          BUILD_TYPE: 'Debug'
          BUILD_REDECOMP: 'On'
      linux_clang10_release:
          VM_ImageName: 'ubuntu-22.04'
          Compiler_ImageName: $(Clang_14_ImageName)
          TEST_TARGET: 'linux_clang14'
          HOST_CONFIG: 'clang@14.0.0.cmake'
          BUILD_TYPE: 'Release'
          BUILD_REDECOMP: 'On'

  pool:
    vmImage: $(VM_ImageName)

  steps:
  - checkout: self
    clean: true
    submodules: recursive
  - script:  |
      echo " -e $TEST_TARGET -e HOST_CONFIG $(Compiler_ImageName) ./scripts/llnl/build_src.py $BUILD_SRC_OPTS -v --host-config $HOST_CONFIG --extra-cmake-options \"${CMAKE_OPTS} -DCMAKE_BUILD_TYPE=$BUILD_TYPE\""
      docker run --rm -v `pwd`:$(HOME_DIR)/tribol -e TEST_TARGET -e HOST_CONFIG $(Compiler_ImageName) ./tribol/scripts/llnl/build_src.py $BUILD_SRC_OPTS -v --host-config $HOST_CONFIG --extra-cmake-options "$(BASE_CMAKE_OPTS) ${CMAKE_OPTS} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_REDECOMP=$(BUILD_REDECOMP)"

    displayName: '$(TEST_TARGET) Build & Test'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: '$(TEST_TARGET) Tests'
      failTaskOnFailedTests: true

#TODO: Enable if you want code checks
#- job: Check_Code
#  variables:
#    VM_ImageName: 'ubuntu-22.04'
#    Compiler_ImageName: $(Clang_14_ImageName)
#    TEST_TARGET: 'linux_clang14'
#    HOST_CONFIG: 'clang@14.0.0.cmake'
#
#  strategy:
#    matrix:
#TODO: Enable if you want codecov support
#      coverage:
#        DO_COVERAGE_CHECK: 'yes'
#        DO_DOCS_CHECK: 'no'
#        DO_STYLE_CHECK: 'no'
#TODO: Enable if you want to ensure documentation does not have warnings
#      docs:
#        DO_COVERAGE_CHECK: 'no'
#        DO_DOCS_CHECK: 'yes'
#        DO_STYLE_CHECK: 'no'
#TODO: Enable if you want to enforce style checks
#      style:
#        DO_COVERAGE_CHECK: 'no'
#        DO_DOCS_CHECK: 'no'
#        DO_STYLE_CHECK: 'yes'
#
#  pool:
#    vmImage: $(VM_ImageName)
#
#  steps:
#  - checkout: self
#    clean: true
#    submodules: recursive
#  # https://docs.codecov.io/docs/testing-with-docker
#  - script:  |
#      ci_env=`bash <(curl -s https://codecov.io/env)`
#      echo "  -e DO_COVERAGE_CHECK  -e DO_DOCS_CHECK -e DO_STYLE_CHECK -e HOST_CONFIG ./tribol/scripts/azure-pipelines/linux-check.sh"
#      docker run --rm -v `pwd`:$(HOME_DIR)/tribol $ci_env -e DO_COVERAGE_CHECK  -e DO_DOCS_CHECK -e DO_STYLE_CHECK -e HOST_CONFIG $(Compiler_ImageName) ./tribol/scripts/azure-pipelines/linux-check.sh
#    displayName: '$(TEST_TARGET) Check'
