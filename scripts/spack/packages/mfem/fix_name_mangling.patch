diff --git a/linalg/densemat.cpp b/linalg/densemat.cpp
index dbd2d0d57..776942731 100644
--- a/linalg/densemat.cpp
+++ b/linalg/densemat.cpp
@@ -35,50 +35,50 @@
 
 #ifdef MFEM_USE_LAPACK
 extern "C" void
-dgemm_(char *, char *, int *, int *, int *, double *, double *,
+dgemm(char *, char *, int *, int *, int *, double *, double *,
        int *, double *, int *, double *, double *, int *);
 extern "C" void
-dgetrf_(int *, int *, double *, int *, int *, int *);
+dgetrf(int *, int *, double *, int *, int *, int *);
 extern "C" void
-dgetrs_(char *, int *, int *, double *, int *, int *, double *, int *, int *);
+dgetrs(char *, int *, int *, double *, int *, int *, double *, int *, int *);
 extern "C" void
-dgetri_(int *N, double *A, int *LDA, int *IPIV, double *WORK,
+dgetri(int *N, double *A, int *LDA, int *IPIV, double *WORK,
         int *LWORK, int *INFO);
 extern "C" void
-dsyevr_(char *JOBZ, char *RANGE, char *UPLO, int *N, double *A, int *LDA,
+dsyevr(char *JOBZ, char *RANGE, char *UPLO, int *N, double *A, int *LDA,
         double *VL, double *VU, int *IL, int *IU, double *ABSTOL, int *M,
         double *W, double *Z, int *LDZ, int *ISUPPZ, double *WORK, int *LWORK,
         int *IWORK, int *LIWORK, int *INFO);
 extern "C" void
-dsyev_(char *JOBZ, char *UPLO, int *N, double *A, int *LDA, double *W,
+dsyev(char *JOBZ, char *UPLO, int *N, double *A, int *LDA, double *W,
        double *WORK, int *LWORK, int *INFO);
 extern "C" void
-dsygv_ (int *ITYPE, char *JOBZ, char *UPLO, int * N, double *A, int *LDA,
+dsygv (int *ITYPE, char *JOBZ, char *UPLO, int * N, double *A, int *LDA,
         double *B, int *LDB, double *W,  double *WORK, int *LWORK, int *INFO);
 extern "C" void
-dgesvd_(char *JOBU, char *JOBVT, int *M, int *N, double *A, int *LDA,
+dgesvd(char *JOBU, char *JOBVT, int *M, int *N, double *A, int *LDA,
         double *S, double *U, int *LDU, double *VT, int *LDVT, double *WORK,
         int *LWORK, int *INFO);
 extern "C" void
-dtrsm_(char *side, char *uplo, char *transa, char *diag, int *m, int *n,
+dtrsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n,
        double *alpha, double *a, int *lda, double *b, int *ldb);
 extern "C" void
-dggev_(char *jobvl, char *jobvr, int *n, double *a, int *lda, double *B,
+dggev(char *jobvl, char *jobvr, int *n, double *a, int *lda, double *B,
        int *ldb, double *alphar, double *alphai, double *beta, double *vl,
        int * ldvl, double * vr, int * ldvr, double * work, int * lwork, int* info);
 
 // Cholesky factorizations/solves
 extern "C" void
-dpotrf_(char *, int *, double *, int *, int *);
+dpotrf(char *, int *, double *, int *, int *);
 // Solve
 extern "C" void
-dpotrs_(char *, int *, int *, double *, int *, double *, int *, int *);
+dpotrs(char *, int *, int *, double *, int *, double *, int *, int *);
 // Triangular Solves
 extern "C" void
-dtrtrs_(char *, char*, char *, int *, int *, double *, int *, double *, int *,
+dtrtrs(char *, char*, char *, int *, int *, double *, int *, double *, int *,
         int *);
 extern "C" void
-dpotri_(char *, int *, double *, int*, int *);
+dpotri(char *, int *, double *, int*, int *);
 #endif
 
 
@@ -643,19 +643,19 @@ void DenseMatrix::Invert()
    double qwork, *work;
    int    info;
 
-   dgetrf_(&width, &width, data, &width, ipiv, &info);
+   dgetrf(&width, &width, data, &width, ipiv, &info);
 
    if (info)
    {
       mfem_error("DenseMatrix::Invert() : Error in DGETRF");
    }
 
-   dgetri_(&width, data, &width, ipiv, &qwork, &lwork, &info);
+   dgetri(&width, data, &width, ipiv, &qwork, &lwork, &info);
 
    lwork = (int) qwork;
    work = new double[lwork];
 
-   dgetri_(&width, data, &width, ipiv, work, &lwork, &info);
+   dgetri(&width, data, &width, ipiv, work, &lwork, &info);
 
    if (info)
    {
@@ -845,7 +845,7 @@ void DenseMatrix::FNorm(double &scale_factor, double &scaled_fnorm2) const
    scaled_fnorm2 = fnorm2;
 }
 
-void dsyevr_Eigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
+void dsyevrEigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
 {
 #ifdef MFEM_USE_LAPACK
    ev.SetSize(a.Width());
@@ -891,7 +891,7 @@ void dsyevr_Eigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
       A[i] = data[i];
    }
 
-   dsyevr_( &JOBZ, &RANGE, &UPLO, &N, A, &LDA, &VL, &VU, &IL, &IU,
+   dsyevr( &JOBZ, &RANGE, &UPLO, &N, A, &LDA, &VL, &VU, &IL, &IU,
             &ABSTOL, &M, W, Z, &LDZ, ISUPPZ, &QWORK, &LWORK,
             &QIWORK, &LIWORK, &INFO );
 
@@ -901,13 +901,13 @@ void dsyevr_Eigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
    WORK  = new double[LWORK];
    IWORK = new int[LIWORK];
 
-   dsyevr_( &JOBZ, &RANGE, &UPLO, &N, A, &LDA, &VL, &VU, &IL, &IU,
+   dsyevr( &JOBZ, &RANGE, &UPLO, &N, A, &LDA, &VL, &VU, &IL, &IU,
             &ABSTOL, &M, W, Z, &LDZ, ISUPPZ, WORK, &LWORK,
             IWORK, &LIWORK, &INFO );
 
    if (INFO != 0)
    {
-      mfem::err << "dsyevr_Eigensystem(...): DSYEVR error code: "
+      mfem::err << "dsyevrEigensystem(...): DSYEVR error code: "
                 << INFO << endl;
       mfem_error();
    }
@@ -915,18 +915,18 @@ void dsyevr_Eigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
 #ifdef MFEM_DEBUG
    if (M < N)
    {
-      mfem::err << "dsyevr_Eigensystem(...):\n"
+      mfem::err << "dsyevrEigensystem(...):\n"
                 << " DSYEVR did not find all eigenvalues "
                 << M << "/" << N << endl;
       mfem_error();
    }
    if (CheckFinite(W, N) > 0)
    {
-      mfem_error("dsyevr_Eigensystem(...): inf/nan values in W");
+      mfem_error("dsyevrEigensystem(...): inf/nan values in W");
    }
    if (CheckFinite(Z, N*N) > 0)
    {
-      mfem_error("dsyevr_Eigensystem(...): inf/nan values in Z");
+      mfem_error("dsyevrEigensystem(...): inf/nan values in Z");
    }
    VU = 0.0;
    for (IL = 0; IL < N; IL++)
@@ -951,7 +951,7 @@ void dsyevr_Eigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
          }
          if (VU > 0.5)
          {
-            mfem::err << "dsyevr_Eigensystem(...):"
+            mfem::err << "dsyevrEigensystem(...):"
                       << " Z^t Z - I deviation = " << VU
                       << "\n W[max] = " << W[N-1] << ", W[min] = "
                       << W[0] << ", N = " << N << endl;
@@ -960,14 +960,14 @@ void dsyevr_Eigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
       }
    if (VU > 1e-9)
    {
-      mfem::err << "dsyevr_Eigensystem(...):"
+      mfem::err << "dsyevrEigensystem(...):"
                 << " Z^t Z - I deviation = " << VU
                 << "\n W[max] = " << W[N-1] << ", W[min] = "
                 << W[0] << ", N = " << N << endl;
    }
    if (VU > 1e-5)
    {
-      mfem_error("dsyevr_Eigensystem(...): ERROR: ...");
+      mfem_error("dsyevrEigensystem(...): ERROR: ...");
    }
    VU = 0.0;
    for (IL = 0; IL < N; IL++)
@@ -986,14 +986,14 @@ void dsyevr_Eigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
       }
    if (VU > 1e-9)
    {
-      mfem::err << "dsyevr_Eigensystem(...):"
+      mfem::err << "dsyevrEigensystem(...):"
                 << " max matrix deviation = " << VU
                 << "\n W[max] = " << W[N-1] << ", W[min] = "
                 << W[0] << ", N = " << N << endl;
    }
    if (VU > 1e-5)
    {
-      mfem_error("dsyevr_Eigensystem(...): ERROR: ...");
+      mfem_error("dsyevrEigensystem(...): ERROR: ...");
    }
 #endif
 
@@ -1008,7 +1008,7 @@ void dsyevr_Eigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
 #endif
 }
 
-void dsyev_Eigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
+void dsyevEigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
 {
 #ifdef MFEM_USE_LAPACK
    int   N      = a.Width();
@@ -1043,16 +1043,16 @@ void dsyev_Eigensystem(DenseMatrix &a, Vector &ev, DenseMatrix *evect)
       A[i] = data[i];
    }
 
-   dsyev_(&JOBZ, &UPLO, &N, A, &LDA, W, &QWORK, &LWORK, &INFO);
+   dsyev(&JOBZ, &UPLO, &N, A, &LDA, W, &QWORK, &LWORK, &INFO);
 
    LWORK = (int) QWORK;
    WORK = new double[LWORK];
 
-   dsyev_(&JOBZ, &UPLO, &N, A, &LDA, W, WORK, &LWORK, &INFO);
+   dsyev(&JOBZ, &UPLO, &N, A, &LDA, W, WORK, &LWORK, &INFO);
 
    if (INFO != 0)
    {
-      mfem::err << "dsyev_Eigensystem: DSYEV error code: " << INFO << endl;
+      mfem::err << "dsyevEigensystem: DSYEV error code: " << INFO << endl;
       mfem_error();
    }
 
@@ -1069,9 +1069,9 @@ void DenseMatrix::Eigensystem(Vector &ev, DenseMatrix *evect)
 {
 #ifdef MFEM_USE_LAPACK
 
-   // dsyevr_Eigensystem(*this, ev, evect);
+   // dsyevrEigensystem(*this, ev, evect);
 
-   dsyev_Eigensystem(*this, ev, evect);
+   dsyevEigensystem(*this, ev, evect);
 
 #else
 
@@ -1082,7 +1082,7 @@ void DenseMatrix::Eigensystem(Vector &ev, DenseMatrix *evect)
 #endif
 }
 
-void dsygv_Eigensystem(DenseMatrix &a, DenseMatrix &b, Vector &ev,
+void dsygvEigensystem(DenseMatrix &a, DenseMatrix &b, Vector &ev,
                        DenseMatrix *evect)
 {
 #ifdef MFEM_USE_LAPACK
@@ -1123,16 +1123,16 @@ void dsygv_Eigensystem(DenseMatrix &a, DenseMatrix &b, Vector &ev,
       B[i] = b_data[i];
    }
 
-   dsygv_(&ITYPE, &JOBZ, &UPLO, &N, A, &LDA, B, &LDB, W, &QWORK, &LWORK, &INFO);
+   dsygv(&ITYPE, &JOBZ, &UPLO, &N, A, &LDA, B, &LDB, W, &QWORK, &LWORK, &INFO);
 
    LWORK = (int) QWORK;
    WORK = new double[LWORK];
 
-   dsygv_(&ITYPE, &JOBZ, &UPLO, &N, A, &LDA, B, &LDB, W, WORK, &LWORK, &INFO);
+   dsygv(&ITYPE, &JOBZ, &UPLO, &N, A, &LDA, B, &LDB, W, WORK, &LWORK, &INFO);
 
    if (INFO != 0)
    {
-      mfem::err << "dsygv_Eigensystem: DSYGV error code: " << INFO << endl;
+      mfem::err << "dsygvEigensystem: DSYGV error code: " << INFO << endl;
       mfem_error();
    }
 
@@ -1152,7 +1152,7 @@ void DenseMatrix::Eigensystem(DenseMatrix &b, Vector &ev,
 {
 #ifdef MFEM_USE_LAPACK
 
-   dsygv_Eigensystem(*this, b, ev, evect);
+   dsygvEigensystem(*this, b, ev, evect);
 
 #else
    MFEM_CONTRACT_VAR(b);
@@ -1180,13 +1180,13 @@ void DenseMatrix::SingularValues(Vector &sv) const
    int         info;
    double      qwork;
 
-   dgesvd_(&jobu, &jobvt, &m, &n, a, &m,
+   dgesvd(&jobu, &jobvt, &m, &n, a, &m,
            s, u, &m, vt, &n, &qwork, &lwork, &info);
 
    lwork = (int) qwork;
    work = new double[lwork];
 
-   dgesvd_(&jobu, &jobvt, &m, &n, a, &m,
+   dgesvd(&jobu, &jobvt, &m, &n, a, &m,
            s, u, &m, vt, &n, work, &lwork, &info);
 
    delete [] work;
@@ -2006,7 +2006,7 @@ void Mult(const DenseMatrix &b, const DenseMatrix &c, DenseMatrix &a)
    static double alpha = 1.0, beta = 0.0;
    int m = b.Height(), n = c.Width(), k = b.Width();
 
-   dgemm_(&transa, &transb, &m, &n, &k, &alpha, b.Data(), &m,
+   dgemm(&transa, &transb, &m, &n, &k, &alpha, b.Data(), &m,
           c.Data(), &k, &beta, a.Data(), &m);
 #else
    const int ah = a.Height();
@@ -2030,7 +2030,7 @@ void AddMult_a(double alpha, const DenseMatrix &b, const DenseMatrix &c,
    static double beta = 1.0;
    int m = b.Height(), n = c.Width(), k = b.Width();
 
-   dgemm_(&transa, &transb, &m, &n, &k, &alpha, b.Data(), &m,
+   dgemm(&transa, &transb, &m, &n, &k, &alpha, b.Data(), &m,
           c.Data(), &k, &beta, a.Data(), &m);
 #else
    const int ah = a.Height();
@@ -2062,7 +2062,7 @@ void AddMult(const DenseMatrix &b, const DenseMatrix &c, DenseMatrix &a)
    static double alpha = 1.0, beta = 1.0;
    int m = b.Height(), n = c.Width(), k = b.Width();
 
-   dgemm_(&transa, &transb, &m, &n, &k, &alpha, b.Data(), &m,
+   dgemm(&transa, &transb, &m, &n, &k, &alpha, b.Data(), &m,
           c.Data(), &k, &beta, a.Data(), &m);
 #else
    const int ah = a.Height();
@@ -2401,7 +2401,7 @@ void MultABt(const DenseMatrix &A, const DenseMatrix &B, DenseMatrix &ABt)
    static double alpha = 1.0, beta = 0.0;
    int m = A.Height(), n = B.Height(), k = A.Width();
 
-   dgemm_(&transa, &transb, &m, &n, &k, &alpha, A.Data(), &m,
+   dgemm(&transa, &transb, &m, &n, &k, &alpha, A.Data(), &m,
           B.Data(), &n, &beta, ABt.Data(), &m);
 #elif 1
    const int ah = A.Height();
@@ -2506,7 +2506,7 @@ void AddMultABt(const DenseMatrix &A, const DenseMatrix &B, DenseMatrix &ABt)
    static double alpha = 1.0, beta = 1.0;
    int m = A.Height(), n = B.Height(), k = A.Width();
 
-   dgemm_(&transa, &transb, &m, &n, &k, &alpha, A.Data(), &m,
+   dgemm(&transa, &transb, &m, &n, &k, &alpha, A.Data(), &m,
           B.Data(), &n, &beta, ABt.Data(), &m);
 #elif 1
    const int ah = A.Height();
@@ -2601,7 +2601,7 @@ void AddMult_a_ABt(double a, const DenseMatrix &A, const DenseMatrix &B,
    static double beta = 1.0;
    int m = A.Height(), n = B.Height(), k = A.Width();
 
-   dgemm_(&transa, &transb, &m, &n, &k, &alpha, A.Data(), &m,
+   dgemm(&transa, &transb, &m, &n, &k, &alpha, A.Data(), &m,
           B.Data(), &n, &beta, ABt.Data(), &m);
 #elif 1
    const int ah = A.Height();
@@ -2658,7 +2658,7 @@ void MultAtB(const DenseMatrix &A, const DenseMatrix &B, DenseMatrix &AtB)
    static double alpha = 1.0, beta = 0.0;
    int m = A.Width(), n = B.Width(), k = A.Height();
 
-   dgemm_(&transa, &transb, &m, &n, &k, &alpha, A.Data(), &k,
+   dgemm(&transa, &transb, &m, &n, &k, &alpha, A.Data(), &k,
           B.Data(), &k, &beta, AtB.Data(), &m);
 #elif 1
    const int ah = A.Height();
@@ -2862,7 +2862,7 @@ bool LUFactors::Factor(int m, double TOL)
 {
 #ifdef MFEM_USE_LAPACK
    int info = 0;
-   if (m) { dgetrf_(&m, &m, data, &m, ipiv, &info); }
+   if (m) { dgetrf(&m, &m, data, &m, ipiv, &info); }
    return info == 0;
 #else
    // compiling without LAPACK
@@ -3014,7 +3014,7 @@ void LUFactors::Solve(int m, int n, double *X) const
 #ifdef MFEM_USE_LAPACK
    char trans = 'N';
    int  info = 0;
-   if (m > 0 && n > 0) { dgetrs_(&trans, &m, &n, data, &m, ipiv, X, &m, &info); }
+   if (m > 0 && n > 0) { dgetrs(&trans, &m, &n, data, &m, ipiv, X, &m, &info); }
    MFEM_VERIFY(!info, "LAPACK: error in DGETRS");
 #else
    // compiling without LAPACK
@@ -3031,8 +3031,8 @@ void LUFactors::RightSolve(int m, int n, double *X) const
    double alpha = 1.0;
    if (m > 0 && n > 0)
    {
-      dtrsm_(&side,&u_ch,&n_ch,&n_ch,&n,&m,&alpha,data,&m,X,&n);
-      dtrsm_(&side,&l_ch,&n_ch,&u_ch,&n,&m,&alpha,data,&m,X,&n);
+      dtrsm(&side,&u_ch,&n_ch,&n_ch,&n,&m,&alpha,data,&m,X,&n);
+      dtrsm(&side,&l_ch,&n_ch,&u_ch,&n,&m,&alpha,data,&m,X,&n);
    }
 #else
    // compiling without LAPACK
@@ -3209,7 +3209,7 @@ bool CholeskyFactors::Factor(int m, double TOL)
    int info = 0;
    char uplo = 'L';
    MFEM_VERIFY(data, "Matrix data not set");
-   if (m) {dpotrf_(&uplo, &m, data, &m, &info);}
+   if (m) {dpotrf(&uplo, &m, data, &m, &info);}
    return info == 0;
 #else
    // Cholesky–Crout algorithm
@@ -3301,7 +3301,7 @@ void CholeskyFactors::LSolve(int m, int n, double * X) const
    char diag = 'N';
    int info = 0;
 
-   dtrtrs_(&uplo, &trans, &diag, &m, &n, data, &m, X, &m, &info);
+   dtrtrs(&uplo, &trans, &diag, &m, &n, data, &m, X, &m, &info);
    MFEM_VERIFY(!info, "CholeskyFactors:LSolve:: info");
 
 #else
@@ -3331,7 +3331,7 @@ void CholeskyFactors::USolve(int m, int n, double * X) const
    char diag = 'N';
    int info = 0;
 
-   dtrtrs_(&uplo, &trans, &diag, &m, &n, data, &m, X, &m, &info);
+   dtrtrs(&uplo, &trans, &diag, &m, &n, data, &m, X, &m, &info);
    MFEM_VERIFY(!info, "CholeskyFactors:USolve:: info");
 
 #else
@@ -3357,7 +3357,7 @@ void CholeskyFactors::Solve(int m, int n, double * X) const
 #ifdef MFEM_USE_LAPACK
    char uplo = 'L';
    int info = 0;
-   dpotrs_(&uplo, &m, &n, data, &m, X, &m, &info);
+   dpotrs(&uplo, &m, &n, data, &m, X, &m, &info);
    MFEM_VERIFY(!info, "CholeskyFactors:Solve:: info");
 
 #else
@@ -3378,8 +3378,8 @@ void CholeskyFactors::RightSolve(int m, int n, double * X) const
    double alpha = 1.0;
    if (m > 0 && n > 0)
    {
-      dtrsm_(&side,&uplo,&transt,&diag,&n,&m,&alpha,data,&m,X,&n);
-      dtrsm_(&side,&uplo,&trans,&diag,&n,&m,&alpha,data,&m,X,&n);
+      dtrsm(&side,&uplo,&transt,&diag,&n,&m,&alpha,data,&m,X,&n);
+      dtrsm(&side,&uplo,&trans,&diag,&n,&m,&alpha,data,&m,X,&n);
    }
 #else
    // X <- X L^{-t}
@@ -3427,7 +3427,7 @@ void CholeskyFactors::GetInverseMatrix(int m, double * X) const
    }
    char uplo = 'L';
    int info = 0;
-   dpotri_(&uplo, &m, X, &m, &info);
+   dpotri(&uplo, &m, X, &m, &info);
    MFEM_VERIFY(!info, "CholeskyFactors:GetInverseMatrix:: info");
    // fill in the upper triangular part
    for (int i = 0; i<m; i++)
@@ -3611,7 +3611,7 @@ DenseMatrixEigensystem::DenseMatrixEigensystem(DenseMatrix &m)
    uplo = 'U';
    lwork = -1;
    double qwork;
-   dsyev_(&jobz, &uplo, &n, EVect.Data(), &n, EVal.GetData(),
+   dsyev(&jobz, &uplo, &n, EVect.Data(), &n, EVal.GetData(),
           &qwork, &lwork, &info);
 
    lwork = (int) qwork;
@@ -3640,7 +3640,7 @@ void DenseMatrixEigensystem::Eval()
 #endif
 
    EVect = mat;
-   dsyev_(&jobz, &uplo, &n, EVect.Data(), &n, EVal.GetData(),
+   dsyev(&jobz, &uplo, &n, EVect.Data(), &n, EVal.GetData(),
           work, &lwork, &info);
 
    if (info != 0)
@@ -3693,7 +3693,7 @@ DenseMatrixGeneralizedEigensystem::DenseMatrixGeneralizedEigensystem(
    int nl = max(1,Vl.Height());
    int nr = max(1,Vr.Height());
 
-   dggev_(&jobvl,&jobvr,&n,A_copy.Data(),&n,B_copy.Data(),&n,alphar,
+   dggev(&jobvl,&jobvr,&n,A_copy.Data(),&n,B_copy.Data(),&n,alphar,
           alphai, beta, Vl.Data(), &nl, Vr.Data(), &nr,
           &qwork, &lwork, &info);
 
@@ -3708,7 +3708,7 @@ void DenseMatrixGeneralizedEigensystem::Eval()
 
    A_copy = A;
    B_copy = B;
-   dggev_(&jobvl,&jobvr,&n,A_copy.Data(),&n,B_copy.Data(),&n,alphar,
+   dggev(&jobvl,&jobvr,&n,A_copy.Data(),&n,B_copy.Data(),&n,alphar,
           alphai, beta, Vl.Data(), &nl, Vr.Data(), &nr,
           work, &lwork, &info);
 
@@ -3770,7 +3770,7 @@ void DenseMatrixSVD::Init()
    sv.SetSize(min(m, n));
    double qwork;
    lwork = -1;
-   dgesvd_(&jobu, &jobvt, &m, &n, NULL, &m, sv.GetData(), NULL, &m,
+   dgesvd(&jobu, &jobvt, &m, &n, NULL, &m, sv.GetData(), NULL, &m,
            NULL, &n, &qwork, &lwork, &info);
 
    lwork = (int) qwork;
@@ -3798,7 +3798,7 @@ void DenseMatrixSVD::Eval(DenseMatrix &M)
       datavt = Vt.Data();
    }
    Mc = M;
-   dgesvd_(&jobu, &jobvt, &m, &n, Mc.Data(), &m, sv.GetData(), datau, &m,
+   dgesvd(&jobu, &jobvt, &m, &n, Mc.Data(), &m, sv.GetData(), datau, &m,
            datavt, &n, work, &lwork, &info);
 
    if (info)
