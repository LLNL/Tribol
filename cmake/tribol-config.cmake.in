# Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
# other Tribol Project Developers. See the top-level LICENSE file for details.
#
# SPDX-License-Identifier: (MIT)

cmake_minimum_required(VERSION 3.0 FATAL_ERROR)

@PACKAGE_INIT@

if(NOT TRIBOL_FOUND)

  #----------------------------------------------------------------------------
  # Set version and paths
  #----------------------------------------------------------------------------
  
  set(TRIBOL_VERSION              "@TRIBOL_VERSION_FULL@")
  set(TRIBOL_VERSION_MAJOR        "@TRIBOL_VERSION_MAJOR@")
  set(TRIBOL_VERSION_MINOR        "@TRIBOL_VERSION_MINOR@")
  set(TRIBOL_VERSION_PATCH        "@TRIBOL_VERSION_PATCH@")
  
  set(TRIBOL_INSTALL_PREFIX       "@TRIBOL_INSTALL_PREFIX@")
  set(TRIBOL_INCLUDE_DIRS         "${TRIBOL_INSTALL_PREFIX}/include")

  #----------------------------------------------------------------------------
  # Set user configuration options and features
  #----------------------------------------------------------------------------

  # Language features
  set(TRIBOL_USE_FORTRAN          "@ENABLE_FORTRAN@")
  set(TRIBOL_USE_MPI              "@ENABLE_MPI@")
  #set(TRIBOL_USE_CUDA            "@TRIBOL_USE_CUDA@")
  #set(TRIBOL_USE_OPENMP          "@TRIBOL_USE_OPENMP@")

  # Config options
  set(TRIBOL_USE_SINGLE_PRECISION "@TRIBOL_USE_SINGLE_PRECISION@")
  set(TRIBOL_USE_64BIT_INDEXTYPE  "@TRIBOL_USE_64BIT_INDEXTYPE@")

  # TPLs
  set(TRIBOL_USE_UMPIRE "@TRIBOL_USE_UMPIRE@")
  
  #----------------------------------------------------------------------------
  # Bring in required dependencies for this axom configuration
  #----------------------------------------------------------------------------
  include(CMakeFindDependencyMacro)

  # Tribol is optional
  if(TRIBOL_USE_UMPIRE)
    set(TRIBOL_UMPIRE_DIR  "@UMPIRE_DIR@")
    if(NOT UMPIRE_DIR) 
      set(UMPIRE_DIR "${TRIBOL_UMPIRE_DIR}")
    endif()
    find_dependency(axom REQUIRED NO_DEFAULT_PATH PATHS "${TRIBOL_AXOM_DIR}/lib/cmake")
  endif()

  # axom is a required TPL. It is either external, or built-in
  set(TRIBOL_AXOM_DIR  "@AXOM_DIR@")
  if(NOT AXOM_DIR) 
    set(AXOM_DIR "${TRIBOL_AXOM_DIR}")
  endif()
  find_dependency(axom REQUIRED NO_DEFAULT_PATH PATHS "${TRIBOL_AXOM_DIR}/lib/cmake")

  # mfem is also a required TPL
  set(TRIBOL_MFEM_DIR  "@MFEM_DIR@")
  if(NOT MFEM_DIR) 
    set(MFEM_DIR "${TRIBOL_MFEM_DIR}")
  endif()
  set(TRIBOL_MFEM_BUILT_WITH_CMAKE @MFEM_BUILT_WITH_CMAKE@)

  if(TRIBOL_MFEM_BUILT_WITH_CMAKE)
    # Allow user to override with MFEM_DIR
    if(NOT MFEM_DIR)
      set(MFEM_DIR ${TRIBOL_MFEM_DIR}) 
    endif()
    find_dependency(mfem REQUIRED NO_DEFAULT_PATH PATHS "${MFEM_DIR}/lib/cmake/mfem" NAMES MFEM)
  else()
    # Makefile case handled by exporting `tribol::mfem`
  endif()

  get_filename_component(TRIBOL_CMAKE_CONFIG_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

  #----------------------------------------------------------------------------
  # Include targets installed by BLT
  #----------------------------------------------------------------------------
  include(${AXOM_CMAKE_CONFIG_DIR}/BLTSetupTargets.cmake)

  #----------------------------------------------------------------------------
  # Include targets exported by cmake
  #----------------------------------------------------------------------------
  include(${TRIBOL_CMAKE_CONFIG_DIR}/tribol-targets.cmake)

  #----------------------------------------------------------------------------
  # Indicate that tribol is correctly set up
  #----------------------------------------------------------------------------
  set(TRIBOL_FOUND TRUE)

endif()

